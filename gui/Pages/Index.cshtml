@page
@using System.Web
@model IndexModel
@{
    ViewData["Title"] = "Sensors";

    var client = new HttpClient();

    //const string urlPrefix = "http://127.0.0.1:81/api/";
    var urlPrefix = Environment.GetEnvironmentVariable("API_PATH");
    //const string externalApiPrefix = "http://127.0.0.1:81/api/";
    var externalApiPrefix = Environment.GetEnvironmentVariable("API_EXTERNAL_PATH");
    const string sensorData = "SensorData?";
    const string sensorDataCount = "SensorData/pages?";
    const string sensorDataCsv = "SensorData/csv?";
    const string sensorDataJson = "SensorData/json?";
    const string sensorDashboard = "SensorData/dashboard";

    string[] sensorTypes = {"Termometr", "Barometr", "Higrometr", "Fotometr"};
    string[] sensorUnit = {"°C", "hPa", "%", "lm"};

    string[] parameters = {"from", "to", "type", "sensor", "sortBy", "order", "page"};
    var url = parameters.Where(parameter => HttpContext.Request.Query[parameter].ToString().Length > 0).Aggregate(urlPrefix + sensorData, (current, parameter) => current + "&" + parameter + "=" + HttpUtility.UrlEncode(HttpContext.Request.Query[parameter].ToString()));

    var streamTask = client.GetStreamAsync(url);
    var sensors = await JsonSerializer.DeserializeAsync<List<SensorQueueData>>(await streamTask);
    var sensorsChart = sensors.OrderBy(e => e.date);

    var pages = await JsonSerializer.DeserializeAsync<int>(
        await client.GetStreamAsync(url.Replace(sensorData, sensorDataCount))
        );

    var sensorIds = await JsonSerializer.DeserializeAsync<List<int>>(
        await client.GetStreamAsync(urlPrefix + "SensorData/sensorIdList")
        );
    sensorIds.Sort();

    var currentPage = HttpContext.Request.Query["page"].ToString().Length > 0 ? int.Parse(HttpContext.Request.Query["page"]) : 1;
}

<div class="text-center">
    <form>
        <label>
            Typ czujnika:
            <select name="type" multiple>
                @for (var i = 0; i < sensorTypes.Length; i++)
                {
                    if (HttpContext.Request.Query["type"].Contains(i.ToString()))
                    {
                        <option value="@i" selected>@sensorTypes[i]</option>
                    }
                    else
                    {
                        <option value="@i">@sensorTypes[i]</option>
                    }
                }
            </select>
        </label>
        <label>
            Instancja czujnika:
            <select name="sensor" multiple>
                @foreach (var id in sensorIds)
                {
                    if (HttpContext.Request.Query["sensor"].Contains(id.ToString()))
                    {
                        <option value="@id" selected>Sensor @id</option>
                    }
                    else
                    {
                        <option value="@id">Sensor @id</option>
                    }
                }
            </select>
        </label>
        <label>
            Data od:
            <input name="from" type="datetime-local" value="@HttpContext.Request.Query["from"]"/>
        </label>
        <label>
            Data do:
            <input name="to" type="datetime-local" value="@HttpContext.Request.Query["to"]"/>
        </label>
        <label>
            Sortuj po:
            <select name="sortBy">
                @if (HttpContext.Request.Query["sortBy"].Contains("Value"))
                {
                    <option value="Value" selected>Wartość</option>
                    <option value="Date">Data</option>
                }
                else
                {
                    <option value="Value">Wartość</option>
                    <option value="Date" selected>Data</option>
                }
            </select>
        </label>
        <label>
            Porządek:
            <select name="order">
                @if (HttpContext.Request.Query["order"].Contains("desc"))
                {
                    <option value="asc">Rosnący</option>
                    <option value="desc" selected>Malejący</option>
                }
                else
                {
                    <option value="asc">Rosnący</option>
                    <option value="desc">Malejący</option>
                }
            </select>
        </label>
        <input type="submit" value="Szukaj"/>
    </form>
    <table style="margin: auto">
        <tr>
            <th>Typ</th>
            <th>ID</th>
            <th>Data</th>
            <th>Wartość</th>
        </tr>
        @foreach (var sensor in sensors)
        {
            <tr>
                <td>@sensorTypes[sensor.sensorType]</td>
                <td>@sensor.sensorId</td>
                <td>@string.Format("{0:HH:mm:ss}", sensor.date)</td>
                <td>@sensor.value @sensorUnit[sensor.sensorType]</td>
            </tr>
        }
    </table>
    <br/>
    <p>Pobieranie</p>
    <a href="@url.Replace(sensorData, sensorDataCsv).Replace(urlPrefix, externalApiPrefix)">CSV</a>
    <a href="@url.Replace(sensorData, sensorDataJson).Replace(urlPrefix, externalApiPrefix)">JSON</a>
    <br/>
    <br/>
    @if (pages > 0)
    {
        <p>Strona @currentPage/@pages</p>
    }
    @if (currentPage > 1)
    {
        <a tabindex="0" onclick="goToPage(@(currentPage - 1))">poprzednia</a>
    }
    @if (currentPage < pages)
    {
        <a tabindex="0" onclick="goToPage(@(currentPage + 1))">następna</a>
    }
    <p>Przejdź do strony:</p>
    @for (var i = 1; i <= pages; i++)
    {
        <a tabindex="0" onclick="goToPage(@i)">@i</a>
    }
</div>
    <h3>Panel</h3>
    <div style="display: inline-grid;grid-template-columns: auto auto auto auto auto auto; text-align: left;">
    @foreach (var id in sensorIds)
    {
        <div>
            Sensor @id<br/>
            Ostatnia wartość: <a id="sensor-value-@id"></a><br/>
            Średnia: <a id="sensor-average-@id"></a><br/>
            <br/>
        </div>
    }
    </div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
function goToPage(i) {
    var queryParams = new URLSearchParams(window.location.search);
    queryParams.set('page', i);
    window.location.href='?'+queryParams.toString();
}
function update() {
    let sensors = [
    @foreach (var id in sensorIds)
    {
        @id
        @:,
    }
    ];
    let units = ["°C", "hPa", "%", "lm"];
    $.ajax({
      url: "@(externalApiPrefix + sensorDashboard)"
    }).done(function(response) {
        response.forEach(element => {
            document.getElementById("sensor-value-"+element.sensorId).innerText = element.last + " " + units[element.sensorType];
            document.getElementById("sensor-average-"+element.sensorId).innerText = element.average + " " + units[element.sensorType];
        });
    });
}

setInterval(update,  1000);

</script>
<h3>Wykres</h3>
@foreach (var id in sensorIds)
{
    if (sensorsChart.Count(sensor => sensor.sensorId == id) > 1)
    {
        <div>
            <canvas id="@("myChart" + id)"></canvas>
        </div>

        <script>
      new Chart(
        document.getElementById("@("myChart" + id)"),
        {
              type: 'line',
              data: {
                labels: [@Html.Raw(sensorsChart.Where(sensor => sensor.sensorId == id).Aggregate("", (current, parameter) => current + (current.Length > 0 ? ", " : "") + "\"" + string.Format("{0:HH:mm:ss}", parameter.date) + "\""))],
                datasets: [{
                  label: "Sensor @id",
                  data: [@sensorsChart.Where(sensor => sensor.sensorId == id).Aggregate("", (current, parameter) => current + (current.Length > 0 ? ", " : "") + parameter.value)],
                }]
              },
              options: {}
            }
      );
    </script>
    }
}

<style>
    td {
        padding: 0 5px;
    }
</style>